# Start with a Windows Server Core image that has PowerShell
FROM mcr.microsoft.com/windows/servercore:ltsc2022

# Set shell to PowerShell for Windows commands
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Chocolatey package manager
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; \
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; \
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# Install required tools
RUN choco install git nodejs-lts nano -y

# WSUS Tools Installation Note
RUN Write-Host "NOTE: WSUS Tools (RSAT-WSUS) cannot be installed directly in a container" -ForegroundColor Yellow
RUN Write-Host "This container should be run on a Windows Server host with WSUS tools installed" -ForegroundColor Yellow
RUN Write-Host "Or use the container for UI purposes only and connect to a remote WSUS server" -ForegroundColor Yellow

# Create app directory and copy application files
WORKDIR /app
COPY . .

# Install dependencies 
RUN npm install

# Build the application if a build script exists
RUN if (Test-Path package.json) { \
      $packageJson = Get-Content package.json | ConvertFrom-Json; \
      if ($packageJson.scripts.build) { \
        npm run build; \
      } \
    }

# Expose the port the app runs on
EXPOSE 5000

# Create the startup script
RUN New-Item -Path /app/startup.ps1 -ItemType File -Force
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '# Container startup script'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value 'Write-Host \"Starting WSUS Compliance Dashboard...\" -ForegroundColor Green'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value ''"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '# Check for .env file'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value 'if (-not (Test-Path .env)) {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    Write-Host \"No .env file found. Creating from template...\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    if (Test-Path .env.example) {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Copy-Item .env.example .env'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"Created .env file from template. Please edit with your actual settings.\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    } else {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"WARNING: No .env.example file found!\" -ForegroundColor Red'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    }'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '}'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value ''"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '# Check if WSUS tools are available'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value 'try {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    $module = Get-Module -ListAvailable -Name UpdateServices'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    if ($null -eq $module) {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"NOTICE: WSUS tools are not available in this container.\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"This is normal when running in a containerized environment.\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"The dashboard will run in UI-only mode and connect to a remote WSUS server.\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    } else {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '        Write-Host \"WSUS tools are available.\" -ForegroundColor Green'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    }'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '} catch {'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '    Write-Host \"WARNING: Error checking WSUS tools: $_\" -ForegroundColor Yellow'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '}'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value ''"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value '# Start the application'"
RUN powershell -Command "Add-Content -Path /app/startup.ps1 -Value 'npm start'"

# Set the entry point
ENTRYPOINT ["powershell", "-File", "/app/startup.ps1"]
